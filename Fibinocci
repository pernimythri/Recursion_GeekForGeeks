Time Complexity : O(2^N)

import java.util.*;
class Solution{
     int fibinocci(int n)
    {
        if(n==0)
        return 0;
        else if(n==1)
        return 1;
        else
        return fibinocci(n-1)+fibinocci(n-2);
        
    }
    public static void main(String[] args)
    {
        Solution obj=new Solution();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        System.out.print(obj.fibinocci(n));
    }
}
------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Time Complexity  : O(N * 2^N)

import java.util.*;
class Solution{
     int fibinocci(int n)
    {
        if(n==0)
        return 0;
        else if(n==1)
        return 1;
        else
        return fibinocci(n-1)+fibinocci(n-2);
        
    }
    public static void main(String[] args)
    {
        Solution obj=new Solution();
        Scanner sc=new Scanner(System.in);
        int n=sc.nextInt();
        for(int i=0;i<=n;i++)
        System.out.print((obj.fibinocci(i))+ " ");
    }
}
